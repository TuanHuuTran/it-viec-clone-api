generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum cho các loại vai trò cố định trong hệ thống
enum RoleType {
  ADMIN
  EMPLOYER
  CANDIDATE
  MODERATOR
  VISITOR
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  name         String
  tokenVersion Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Quan hệ RBAC
  roles                UserRole[]
  EmployerProfile      EmployerProfile?
  EmployerRegistration EmployerRegistration[]

  @@map("users")
}

model Role {
  id          String   @id @default(uuid())
  name        RoleType @unique @default(CANDIDATE) // Sử dụng enum để đảm bảo tính nhất quán
  description String?

  // Quan hệ RBAC
  users       UserRole[]
  permissions RolePermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("roles")
}

model Permission {
  id          String  @id @default(uuid())
  name        String  @unique
  code        String  @unique // Mã code để kiểm tra quyền trong code dễ dàng hơn
  description String?

  // Quan hệ RBAC
  roles RolePermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("permissions")
}

model UserRole {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId String

  assignedAt DateTime @default(now())
  assignedBy String? // ID của người gán vai trò (nếu có)

  @@unique([userId, roleId]) // Mỗi người dùng chỉ có 1 bản ghi duy nhất cho mỗi vai trò
  @@index([userId])
  @@index([roleId])
  @@map("role_users")
}

model RolePermission {
  id           String     @id @default(uuid()) @map("id")
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String

  assignedAt DateTime @default(now())

  @@unique([roleId, permissionId]) // Mỗi vai trò chỉ có 1 bản ghi duy nhất cho mỗi quyền
  @@index([roleId])
  @@index([permissionId])
  @@map("role_permissions")
}

model EmployerProfile {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  companyName String
  companySize String?
  industry    String?
  description String? @db.Text
  website     String?
  location    String?

  // Logo và hình ảnh
  logoUrl       String?
  coverImageUrl String?

  // Thông tin bổ sung
  establishedYear Int?

  // Thông tin liên hệ
  phone   String?
  address String? @db.Text

  // Mạng xã hội
  linkedinUrl String?
  facebookUrl String?

  // Thông tin tuyển dụng
  jobs Job[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("employer_profiles")
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
}

model EmployerRegistration {
  id             String             @id @default(uuid())
  userId         String
  user           User               @relation(fields: [userId], references: [id])
  companyName    String
  companyAddress String
  website        String?
  contactPerson  String
  contactEmail   String
  contactPhone   String
  status         RegistrationStatus @default(PENDING)
  notes          String? // Ghi chú của admin
  processedBy    String? // ID của admin xử lý
  processedAt    DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@index([userId])
  @@index([status])
  @@map("employer_registrations")
}

enum JobLevel {
  INTERN
  FRESHER
  JUNIOR
  MIDDLE
  SENIOR
  LEADER
  MANAGER
  DIRECTOR
  C_LEVEL
}

// Enum cho mô hình làm việc
enum WorkingModel {
  ONSITE
  REMOTE
  HYBRID
}

model Job {
  id           String  @id @default(uuid())
  title        String  @db.VarChar(255)
  description  String  @db.Text
  requirements String? @db.Text
  benefits     String? @db.Text

  // Các trường lọc trực tiếp
  level        JobLevel // Fresher, Junior, etc.
  minSalary    Float? // Mức lương tối thiểu
  maxSalary    Float? // Mức lương tối đa
  showSalary   Boolean      @default(false) // Có hiển thị lương hay không
  workingModel WorkingModel // Onsite, Remote, Hybrid

  // Các mối quan hệ lọc
  location   Location @relation(fields: [locationId], references: [id])
  locationId String
  industry   Industry @relation(fields: [industryId], references: [id])
  industryId String

  // Các mối quan hệ nhiều-nhiều
  skills    JobSkill[]
  districts JobDistrict[]

  // Các trường khác
  employer   EmployerProfile @relation(fields: [employerId], references: [id], onDelete: Cascade)
  employerId String
  // applications JobApplication[]

  // Metadata
  isActive  Boolean  @default(true)
  viewCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes cho việc tìm kiếm và lọc
  @@index([level])
  @@index([workingModel])
  @@index([minSalary, maxSalary])
  @@index([locationId])
  @@index([industryId])
  @@index([isActive])
  @@index([title]) // Fulltext search sẽ được cấu hình riêng
  @@map("jobs")
}

// Mô hình địa điểm
model Location {
  id        String     @id @default(uuid())
  name      String     @unique
  jobs      Job[]
  districts District[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("locations")
}

// Mô hình quận/huyện
model District {
  id         String   @id @default(uuid())
  name       String
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId String

  jobs JobDistrict[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, locationId]) // Tên quận là duy nhất trong một thành phố
  @@index([locationId])
  @@map("districts")
}

// Bảng trung gian Job-District
model JobDistrict {
  id         String   @id @default(uuid())
  job        Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId      String
  district   District @relation(fields: [districtId], references: [id], onDelete: Cascade)
  districtId String

  @@unique([jobId, districtId])
  @@index([jobId])
  @@index([districtId])
  @@map("job_districts")
}

// Mô hình ngành nghề
model Industry {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  jobs        Job[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("industries")
}

// Mô hình kỹ năng
model Skill {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?

  jobs JobSkill[]
  // candidates CandidateSkill[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("skills")
}

// Bảng trung gian Job-Skill
model JobSkill {
  id        String  @id @default(uuid())
  job       Job     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId     String
  skill     Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId   String
  isPrimary Boolean @default(false) // Đánh dấu kỹ năng chính

  @@unique([jobId, skillId])
  @@index([jobId])
  @@index([skillId])
  @@index([isPrimary])
  @@map("job_skills")
}
