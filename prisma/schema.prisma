generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum cho các loại vai trò cố định trong hệ thống
enum RoleType {
  ADMIN
  EMPLOYER
  CANDIDATE
  MODERATOR
  VISITOR
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  name         String
  tokenVersion Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Quan hệ RBAC
  roles                UserRole[]
  EmployerProfile      EmployerProfile?
  EmployerRegistration EmployerRegistration[]
  CandidateProfile     CandidateProfile?

  @@map("users")
}

model Role {
  id          String   @id @default(uuid())
  name        RoleType @unique @default(CANDIDATE) // Sử dụng enum để đảm bảo tính nhất quán
  description String?

  // Quan hệ RBAC
  users       UserRole[]
  permissions RolePermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("roles")
}

model Permission {
  id          String  @id @default(uuid())
  name        String  @unique
  code        String  @unique // Mã code để kiểm tra quyền trong code dễ dàng hơn
  description String?

  // Quan hệ RBAC
  roles RolePermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("permissions")
}

model UserRole {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId String

  assignedAt DateTime @default(now())
  assignedBy String? // ID của người gán vai trò (nếu có)

  @@unique([userId, roleId]) // Mỗi người dùng chỉ có 1 bản ghi duy nhất cho mỗi vai trò
  @@index([userId])
  @@index([roleId])
  @@map("role_users")
}

model RolePermission {
  id           String     @id @default(uuid()) @map("id")
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String

  assignedAt DateTime @default(now())

  @@unique([roleId, permissionId]) // Mỗi vai trò chỉ có 1 bản ghi duy nhất cho mỗi quyền
  @@index([roleId])
  @@index([permissionId])
  @@map("role_permissions")
}

model EmployerProfile {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  companyName String
  companySize String?
  industry    String?
  description String? @db.Text
  website     String?
  location    String?

  // Logo và hình ảnh
  logoUrl       String?
  coverImageUrl String?

  // Thông tin bổ sung
  establishedYear Int?

  // Thông tin liên hệ
  phone   String?
  address String? @db.Text

  // Mạng xã hội
  linkedinUrl String?
  facebookUrl String?

  // Thông tin tuyển dụng
  jobs Job[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("employer_profiles")
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
}

model EmployerRegistration {
  id             String             @id @default(uuid())
  userId         String
  user           User               @relation(fields: [userId], references: [id])
  companyName    String
  companyAddress String
  website        String?
  contactPerson  String
  contactEmail   String
  contactPhone   String
  status         RegistrationStatus @default(PENDING)
  notes          String? // Ghi chú của admin
  processedBy    String? // ID của admin xử lý
  processedAt    DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@index([userId])
  @@index([status])
  @@map("employer_registrations")
}

enum JobLevel {
  INTERN
  FRESHER
  JUNIOR
  MIDDLE
  SENIOR
  LEADER
  MANAGER
  DIRECTOR
  C_LEVEL
}

// Enum cho mô hình làm việc
enum WorkingModel {
  ONSITE
  REMOTE
  HYBRID
}

model Job {
  id           String  @id @default(uuid())
  title        String  @db.VarChar(255)
  description  String  @db.Text
  requirements String? @db.Text
  benefits     String? @db.Text

  // Các trường lọc trực tiếp
  level        JobLevel // Fresher, Junior, etc.
  minSalary    Float? // Mức lương tối thiểu
  maxSalary    Float? // Mức lương tối đa
  showSalary   Boolean      @default(false) // Có hiển thị lương hay không
  workingModel WorkingModel // Onsite, Remote, Hybrid

  // Các mối quan hệ lọc
  location   Location @relation(fields: [locationId], references: [id])
  locationId String
  industry   Industry @relation(fields: [industryId], references: [id])
  industryId String

  // Các mối quan hệ nhiều-nhiều
  skills    JobSkill[]
  districts JobDistrict[]

  // Các trường khác
  employer   EmployerProfile @relation(fields: [employerId], references: [id], onDelete: Cascade)
  employerId String
  // applications JobApplication[]

  // Metadata
  isActive       Boolean          @default(true)
  viewCount      Int              @default(0)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  JobApplication JobApplication[]

  // Indexes cho việc tìm kiếm và lọc
  @@index([level])
  @@index([workingModel])
  @@index([minSalary, maxSalary])
  @@index([locationId])
  @@index([industryId])
  @@index([isActive])
  @@index([title]) // Fulltext search sẽ được cấu hình riêng
  @@map("jobs")
}

// Mô hình địa điểm
model Location {
  id        String     @id @default(uuid())
  name      String     @unique
  jobs      Job[]
  districts District[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("locations")
}

// Mô hình quận/huyện
model District {
  id         String   @id @default(uuid())
  name       String
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId String

  jobs JobDistrict[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, locationId]) // Tên quận là duy nhất trong một thành phố
  @@index([locationId])
  @@map("districts")
}

// Bảng trung gian Job-District
model JobDistrict {
  id         String   @id @default(uuid())
  job        Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId      String
  district   District @relation(fields: [districtId], references: [id], onDelete: Cascade)
  districtId String

  @@unique([jobId, districtId])
  @@index([jobId])
  @@index([districtId])
  @@map("job_districts")
}

// Mô hình ngành nghề
model Industry {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  jobs        Job[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("industries")
}

// Mô hình kỹ năng
model Skill {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?

  jobs JobSkill[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  CandidateSkill CandidateSkill[]

  @@map("skills")
}

// Bảng trung gian Job-Skill
model JobSkill {
  id        String  @id @default(uuid())
  job       Job     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId     String
  skill     Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId   String
  isPrimary Boolean @default(false) // Đánh dấu kỹ năng chính

  @@unique([jobId, skillId])
  @@index([jobId])
  @@index([skillId])
  @@index([isPrimary])
  @@map("job_skills")
}

model CandidateProfile {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  // Thông tin cơ bản
  title       String? // Ví dụ: "Senior Full Stack Developer"
  bio         String?   @db.Text // About Me - Giới thiệu bản thân
  phone       String?
  dateOfBirth DateTime?
  gender      String?
  address     String?   @db.Text
  location    String? // Thành phố/tỉnh hiện tại

  // Avatar và thông tin hình ảnh
  avatarUrl     String? // Đường dẫn đến avatar
  coverImageUrl String? // Đường dẫn đến ảnh bìa (nếu có)

  // Thông tin nghề nghiệp
  currentPosition   String? // Vị trí hiện tại
  yearsOfExperience Int? // Tổng số năm kinh nghiệm
  careerLevel       String? // Junior, Middle, Senior, etc.

  // Mức lương mong muốn
  expectedSalary     Float?
  salaryCurrency     String? // VND, USD, etc.
  showExpectedSalary Boolean @default(false)

  // Thông tin tìm việc
  isOpenToWork          Boolean @default(true)
  preferredWorkingModel String? // ONSITE, REMOTE, HYBRID

  // Các liên kết mạng xã hội
  linkedinUrl  String?
  githubUrl    String?
  portfolioUrl String?

  // Các mối quan hệ 1-nhiều
  educations      Education[]
  workExperiences WorkExperience[]
  skills          CandidateSkill[]
  projects        Project[]
  certificates    Certificate[]
  awards          Award[]

  // Các mối quan hệ khác
  applications JobApplication[]
  resumes      Resume[]

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("candidate_profiles")
}

// Bảng trung gian Candidate-Skill
model CandidateSkill {
  id                String           @id @default(uuid())
  candidate         CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId       String
  skill             Skill            @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId           String
  yearsOfExperience Int? // Số năm kinh nghiệm với kỹ năng này
  proficiencyLevel  String? // Mức độ thành thạo (Beginner, Intermediate, Advanced, Expert)

  @@unique([candidateId, skillId])
  @@index([candidateId])
  @@index([skillId])
  @@map("candidate_skills")
}

//---------------------------------------------------
// Phần CV và thông tin chi tiết ứng viên
//---------------------------------------------------

// Mô hình Học vấn
model Education {
  id          String           @id @default(uuid())
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId String

  institution  String // Tên trường/tổ chức giáo dục
  degree       String? // Bằng cấp (Cử nhân, Thạc sĩ, etc.)
  fieldOfStudy String? // Ngành học
  startDate    DateTime
  endDate      DateTime? // Null nếu đang học
  isCurrently  Boolean   @default(false)
  description  String?   @db.Text
  gpa          Float? // Điểm trung bình (nếu có)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([candidateId])
  @@map("educations")
}

// Mô hình Kinh nghiệm làm việc
model WorkExperience {
  id          String           @id @default(uuid())
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId String

  company          String // Tên công ty
  position         String // Vị trí công việc
  location         String? // Địa điểm làm việc
  startDate        DateTime
  endDate          DateTime? // Null nếu đang làm việc
  isCurrently      Boolean   @default(false)
  description      String?   @db.Text
  responsibilities String?   @db.Text
  technologiesUsed String? // Các công nghệ sử dụng, có thể lưu dạng JSON

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([candidateId])
  @@map("work_experiences")
}

// Mô hình Dự án nổi bật
model Project {
  id          String           @id @default(uuid())
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId String

  name             String // Tên dự án
  role             String? // Vai trò trong dự án
  startDate        DateTime
  endDate          DateTime? // Null nếu đang làm
  isCurrently      Boolean        @default(false)
  description      String?        @db.Text
  technologiesUsed String? // Các công nghệ sử dụng, có thể lưu dạng JSON
  projectUrl       String? // Link đến dự án (nếu có)
  githubUrl        String? // Link đến mã nguồn (nếu có)
  images           ProjectImage[] // Các hình ảnh minh họa

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([candidateId])
  @@map("projects")
}

// Mô hình Hình ảnh dự án
model ProjectImage {
  id        String  @id @default(uuid())
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  imageUrl   String
  caption    String?
  orderIndex Int     @default(0) // Vị trí hiển thị

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@map("project_images")
}

// Mô hình Chứng chỉ
model Certificate {
  id          String           @id @default(uuid())
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId String

  name           String // Tên chứng chỉ
  organization   String // Tổ chức cấp chứng chỉ
  issueDate      DateTime
  expirationDate DateTime? // Null nếu không hết hạn
  credentialId   String? // Mã số chứng chỉ
  credentialUrl  String? // Link xác thực chứng chỉ (nếu có)
  description    String?   @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([candidateId])
  @@map("certificates")
}

// Mô hình Giải thưởng
model Award {
  id          String           @id @default(uuid())
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId String

  title        String // Tên giải thưởng
  issuer       String // Tổ chức trao giải
  dateReceived DateTime
  description  String?  @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([candidateId])
  @@map("awards")
}

// Mô hình CV - cho phép người dùng tạo nhiều phiên bản CV
model Resume {
  id          String           @id @default(uuid())
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId String

  name      String // Tên CV (ví dụ: "CV cho vị trí Frontend")
  isDefault Boolean @default(false) // CV mặc định

  // Thông tin thành phần được bao gồm trong CV (có thể tùy chỉnh)
  includeEducation      Boolean @default(true)
  includeWorkExperience Boolean @default(true)
  includeSkills         Boolean @default(true)
  includeProjects       Boolean @default(true)
  includeCertificates   Boolean @default(true)
  includeAwards         Boolean @default(true)

  // Lưu trữ tùy chỉnh cho từng phần (có thể lưu dưới dạng JSON)
  customizations Json?

  // Đường dẫn đến file PDF đã tạo (nếu có)
  pdfUrl String?

  // Các mối quan hệ
  applications JobApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([candidateId])
  @@map("resumes")
}

//---------------------------------------------------
// Phần ứng tuyển
//---------------------------------------------------

// Mô hình Ứng tuyển
model JobApplication {
  id          String           @id @default(uuid())
  job         Job              @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId       String
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId String
  resume      Resume?          @relation(fields: [resumeId], references: [id])
  resumeId    String?

  status      String  @default("PENDING") // PENDING, REVIEWING, ACCEPTED, REJECTED
  coverLetter String? @db.Text

  // Metadata về quá trình ứng tuyển
  appliedAt   DateTime @default(now())
  lastUpdated DateTime @updatedAt

  // Log các hoạt động liên quan đến ứng tuyển
  applicationLogs ApplicationLog[]

  @@unique([jobId, candidateId]) // Mỗi ứng viên chỉ có thể ứng tuyển 1 lần vào mỗi công việc
  @@index([jobId])
  @@index([candidateId])
  @@index([resumeId])
  @@map("job_applications")
}

// Mô hình Log ứng tuyển
model ApplicationLog {
  id            String         @id @default(uuid())
  application   JobApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId String

  status    String // Trạng thái mới
  note      String? @db.Text
  changedBy String // ID của người thay đổi trạng thái

  createdAt DateTime @default(now())

  @@index([applicationId])
  @@map("application_logs")
}
